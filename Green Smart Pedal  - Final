sudo -E ~/rfid_env/bin/python3 pedal_counter_gui.py
```).

Below is the complete code:

---

```python
#!/usr/bin/env python3
"""
Pedal Counter System

This script monitors a pedal (connected between GPIO6 and GND), a push button 
(connected between GPIO12 and GND), and an RFID card reader (acting as a keyboard).
Each pedal press increments a counter; when the push button is pressed, a QR code is generated 
containing the current count and displayed within the GUI. Additionally, physical LEDs provide visual feedback:
  - Green LED (GPIO13): Indicates the system is running.
  - Yellow LED (GPIO19): Flashes when a pedal event is detected.
  - Red LED (GPIO26): Flashes when the push button is pressed (or on errors).

At startup, a pop-up window prompts you to scan your RFID card. The system then loads the saved points 
for that card from an ODS file ("data.ods"). If the card has been scanned before, its previous point total 
is loaded; otherwise, a new record is created with the count starting at zero.

The GUI (built with Tkinter) displays the logo, project title, current count, and the generated QR code.
  
Run this script with sudo:
    sudo -E ~/rfid_env/bin/python3 pedal_counter_gui.py
"""

import tkinter as tk
from tkinter import ttk
from PIL import Image, ImageTk
import threading
import time
import qrcode
import subprocess
import logging
from gpiozero import Button, LED
import RPi.GPIO as GPIO  # Used for warnings and cleanup
import sys
import os
import ezodf  # For ODS file handling

# -------------------- Configuration --------------------
# Define hardware pins (BCM numbering)
PEDAL_PIN = 6        # Pedal connected between GPIO6 and GND
BUTTON_PIN = 12      # Push button connected between GPIO12 and GND

GREEN_LED_PIN = 13   # Green LED: system running
YELLOW_LED_PIN = 19  # Yellow LED: indicates pedal events
RED_LED_PIN = 26     # Red LED: indicates push button press or errors

# Debounce time in milliseconds
DEBOUNCE_TIME = 300

# ODS file path
ODS_FILE = "/home/pi/data.ods"

# -------------------- Global Variables --------------------
count = 0             # Global counter for pedal events
current_card = ""     # The currently scanned RFID card ID
doc = None            # Global ODS document
sheet = None          # Global ODS sheet

# -------------------- Logging Setup --------------------
LOG_FILE = "/home/pi/pedal_counter_gui.log"
logging.basicConfig(
    filename=LOG_FILE,
    level=logging.INFO,
    format='%(asctime)s:%(levelname)s:%(message)s'
)

# -------------------- Hardware Initialization --------------------
# Initialize hardware using gpiozero
pedal = Button(PEDAL_PIN, pull_up=True)
button = Button(BUTTON_PIN, pull_up=True)
green_led = LED(GREEN_LED_PIN)
yellow_led = LED(YELLOW_LED_PIN)
red_led = LED(RED_LED_PIN)

# Turn on green LED to indicate the system is running
green_led.on()

# -------------------- ODS File Functions --------------------
def load_ods(file_path):
    """Load the ODS file if it exists; otherwise, create a new one with headers."""
    if not os.path.exists(file_path):
        doc = ezodf.newdoc(doctype="ods", filename=file_path)
        sheet = ezodf.Sheet("UserData", size=(3, 100))  # 3 columns, 100 rows
        doc.sheets += sheet
        # Set headers: CardID, Points, LastUpdated
        sheet[0,0].set_value("CardID")
        sheet[0,1].set_value("Points")
        sheet[0,2].set_value("LastUpdated")
        doc.save()
    else:
        doc = ezodf.opendoc(file_path)
        sheet = doc.sheets[0]
    return doc, sheet

def get_points_for_card(sheet, card_id):
    """Search for the card_id in the ODS sheet. Return (points, row_index) if found; else (None, None)."""
    for row in range(1, sheet.nrows()):
        cell_val = sheet[row, 0].value
        if cell_val is not None and str(cell_val).strip() == card_id.strip():
            points = sheet[row, 1].value
            return (int(points) if points is not None else 0), row
    return None, None

def update_points_for_card(doc, sheet, card_id, new_points):
    """Update the ODS sheet: if card_id exists, update its points; otherwise, add a new row."""
    existing_points, row_index = get_points_for_card(sheet, card_id)
    if row_index is not None:
        sheet[row_index, 1].set_value(new_points)
        sheet[row_index, 2].set_value(time.strftime("%Y-%m-%d %H:%M:%S"))
        logging.info(f"Updated card {card_id} with new points: {new_points}")
    else:
        row = 1
        while row < sheet.nrows() and sheet[row, 0].value is not None:
            row += 1
        sheet[row, 0].set_value(card_id)
        sheet[row, 1].set_value(new_points)
        sheet[row, 2].set_value(time.strftime("%Y-%m-%d %H:%M:%S"))
        logging.info(f"Added new card {card_id} with points: {new_points}")
    doc.save()

# -------------------- RFID Card Scan Function --------------------
def scan_rfid_card():
    """
    Create a Toplevel window to prompt the user to scan their RFID card.
    The window has a black background and a large, bold white label.
    A "Back" button is provided to cancel scanning.
    Returns the scanned card ID (or "BACK" if the user presses Back).
    """
    card_id = None
    def on_enter(event):
        nonlocal card_id
        card_id = entry.get().strip()
        top.destroy()
    def on_back():
        nonlocal card_id
        card_id = "BACK"
        top.destroy()
    top = tk.Toplevel()
    top.title("Scan RFID Card")
    top.geometry("700x300")
    top.configure(bg="black")
    prompt_label = tk.Label(top, text="Please scan your RFID card:", font=("Helvetica", 16, "bold"), bg="black", fg="white")
    prompt_label.pack(pady=20)
    entry = ttk.Entry(top, font=("Helvetica", 12, "bold"))
    entry.pack(pady=10)
    entry.focus_set()
    entry.bind("<Return>", on_enter)
    back_button = ttk.Button(top, text="Back", command=on_back)
    back_button.pack(pady=10)
    top.wait_window()
    return card_id

# -------------------- QR Code Generation --------------------
def generate_qr_code(data):
    """
    Generate a QR code image from the provided data.
    Returns a PIL Image object.
    """
    try:
        qr = qrcode.QRCode(
            version=1,
            error_correction=qrcode.constants.ERROR_CORRECT_L,
            box_size=10,
            border=4,
        )
        qr.add_data(data)
        qr.make(fit=True)
        img = qr.make_image(fill_color="black", back_color="white")
        return img
    except Exception as e:
        logging.error("QR code generation error: " + str(e))
        red_led.blink(on_time=1, off_time=1, n=2)
        return None

# -------------------- GUI Class --------------------
class PedalCounterApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Green Smart Pedal System")
        self.root.geometry("1280x720")
        self.root.configure(bg="black")  # Set window background to black
        self.create_widgets()

    def create_widgets(self):
        # Create a main frame to hold two columns (left for QR code, right for text)
        self.main_frame = ttk.Frame(self.root, style="TFrame")
        self.main_frame.pack(expand=True, fill="both")
        # Configure the style for the main frame if desired
        style = ttk.Style()
        style.theme_use("clam")
        style.configure("TFrame", background="black")
        
        # Left frame: for QR code image
        self.left_frame = ttk.Frame(self.main_frame, style="TFrame")
        self.left_frame.grid(row=0, column=0, padx=20, pady=20, sticky="n")
        
        # Right frame: for logo, title, count, manual button, and status
        self.right_frame = ttk.Frame(self.main_frame, style="TFrame")
        self.right_frame.grid(row=0, column=1, padx=20, pady=20, sticky="n")
        
        # In the right frame, add the logo above the project title
        try:
            self.logo_img = Image.open("qstss.png")
            self.logo_img = self.logo_img.resize((500, 120))
            self.logo_photo = ImageTk.PhotoImage(self.logo_img)
            self.logo_label = ttk.Label(self.right_frame, image=self.logo_photo, background="black")
            self.logo_label.pack(pady=10)
        except Exception as e:
            logging.error("Error loading logo image: " + str(e))
        
        # Create a style for ttk widgets with black background and white bold text
        style.configure("TLabel", background="black", foreground="white", font=("Helvetica", 20, "bold"))
        style.configure("Title.TLabel", background="black", foreground="white", font=("Helvetica", 30, "bold"))
        style.configure("TButton", background="black", foreground="white", font=("Helvetica", 20, "bold"))
        
        # In the right frame, add the project title
        self.title_label = ttk.Label(self.right_frame, text="Green Smart Pedal System", style="Title.TLabel")
        self.title_label.pack(pady=10)
        
        # In the right frame, add the count display
        self.count_label = ttk.Label(self.right_frame, text="Count: 0", style="TLabel")
        self.count_label.pack(pady=20)
        
        # In the right frame, add the manual QR code generation button (optional)
        self.qr_button = ttk.Button(self.right_frame, text="Generate QRCODE", command=self.manual_generate_qr)
        self.qr_button.pack(pady=20)
        
        # In the right frame, add the status message label
        self.status_label = ttk.Label(self.right_frame, text="", style="TLabel")
        self.status_label.pack(pady=20)
        
        # In the left frame, add the label to display the QR code image
        self.qr_label = ttk.Label(self.left_frame, background="black")
        self.qr_label.pack(pady=10)

    def update_count_label(self, new_count):
        self.count_label.config(text=f"Count: {new_count}")

    def update_qr_image(self, pil_image):
        try:
            pil_image = pil_image.resize((400, 400))  # Make QR code image bigger
            self.qr_photo = ImageTk.PhotoImage(pil_image)
            self.qr_label.config(image=self.qr_photo)
        except Exception as e:
            logging.error("Error updating QR image: " + str(e))
            self.status_label.config(text="Error displaying QR code", foreground="red")

    def update_status(self, message, color="white"):
        self.status_label.config(text=message, foreground=color)

    def manual_generate_qr(self):
        global count
        data = f"Keep Going ...Your Point is: {count}"
        img = generate_qr_code(data)
        if img:
            self.update_qr_image(img)
            red_led.blink(on_time=1, off_time=1, n=1)
            self.update_status("QR code generated", "white")
        else:
            self.update_status("QR code generation failed", "red")

# -------------------- Hardware Callback Functions --------------------
def pedal_callback():
    """
    Callback function for pedal press.
    Increments the count, flashes the yellow LED, and updates the GUI.
    """
    global count
    count += 1
    print(f"Pedal pressed. Count: {count}")
    logging.info(f"Pedal pressed. Count: {count}")
    yellow_led.blink(on_time=0.5, off_time=0.5, n=1)
    # Update GUI count label (thread-safe)
    app.root.after(0, app.update_count_label, count)

def button_callback():
    """
    Callback function for push button press.
    Flashes the red LED, generates a QR code for the current count, updates the GUI,
    prints/logs the current count, and updates the ODS file.
    """
    global count, current_card, doc, sheet
    print("Push button pressed!")
    logging.info("Push button pressed!")
    red_led.blink(on_time=1, off_time=1, n=1)
    data = f"Keep Going ...Your Point is: {count} - You Can Redeem These Points Now"
    img = generate_qr_code(data)
    if img:
        app.root.after(0, app.update_qr_image, img)
        app.root.after(0, app.update_status, f"QR code generated for Points: {count}", "white")
    else:
        app.root.after(0, app.update_status, "QR code generation failed", "red")
    print(f"Current count is {count}")
    logging.info(f"Current count is {count}")
    # Update the ODS file with the new count for the current card
    update_points_for_card(doc, sheet, current_card, count)

# -------------------- Assign Hardware Callbacks --------------------
pedal.when_pressed = pedal_callback
button.when_pressed = button_callback

# -------------------- New RFID & ODS Integration Functions --------------------
def scan_rfid_card():
    """
    Create a Toplevel window to prompt the user to scan their RFID card.
    The window has a black background and a large, bold white label.
    A "Back" button is provided to cancel scanning.
    Returns the scanned card ID (or "BACK" if the user presses Back).
    """
    card_id = None
    def on_enter(event):
        nonlocal card_id
        card_id = entry.get().strip()
        top.destroy()
    def on_back():
        nonlocal card_id
        card_id = "BACK"
        top.destroy()
    top = tk.Toplevel()
    top.title("Scan RFID Card")
    top.geometry("700x300")
    top.configure(bg="black")
    prompt_label = tk.Label(top, text="Please scan your RFID card:", font=("Helvetica", 16, "bold"), bg="black", fg="white")
    prompt_label.pack(pady=20)
    entry = ttk.Entry(top, font=("Helvetica", 12, "bold"))
    entry.pack(pady=10)
    entry.focus_set()
    entry.bind("<Return>", on_enter)
    back_button = ttk.Button(top, text="Back", command=on_back)
    back_button.pack(pady=10)
    top.wait_window()
    return card_id

# -------------------- ODS File Functions --------------------
def load_ods(file_path):
    """Load the ODS file if it exists; otherwise, create a new one with headers."""
    if not os.path.exists(file_path):
        doc = ezodf.newdoc(doctype="ods", filename=file_path)
        sheet = ezodf.Sheet("UserData", size=(3, 100))  # 3 columns, 100 rows
        doc.sheets += sheet
        sheet[0,0].set_value("CardID")
        sheet[0,1].set_value("Points")
        sheet[0,2].set_value("LastUpdated")
        doc.save()
    else:
        doc = ezodf.opendoc(file_path)
        sheet = doc.sheets[0]
    return doc, sheet

def get_points_for_card(sheet, card_id):
    """Search for the card_id in the ODS sheet. Return (points, row_index) if found; else (None, None)."""
    for row in range(1, sheet.nrows()):
        cell_val = sheet[row, 0].value
        if cell_val is not None and str(cell_val).strip() == card_id.strip():
            points = sheet[row, 1].value
            return (int(points) if points is not None else 0), row
    return None, None

def update_points_for_card(doc, sheet, card_id, new_points):
    """Update the ODS sheet: if card_id exists, update its points; otherwise, add a new row."""
    existing_points, row_index = get_points_for_card(sheet, card_id)
    if row_index is not None:
        sheet[row_index, 1].set_value(new_points)
        sheet[row_index, 2].set_value(time.strftime("%Y-%m-%d %H:%M:%S"))
        logging.info(f"Updated card {card_id} with new points: {new_points}")
    else:
        row = 1
        while row < sheet.nrows() and sheet[row, 0].value is not None:
            row += 1
        sheet[row, 0].set_value(card_id)
        sheet[row, 1].set_value(new_points)
        sheet[row, 2].set_value(time.strftime("%Y-%m-%d %H:%M:%S"))
        logging.info(f"Added new card {card_id} with points: {new_points}")
    doc.save()

# -------------------- Main Program with RFID Integration --------------------
if __name__ == "__main__":
    # First, prompt for RFID card scan
    temp_root = tk.Tk()
    temp_root.withdraw()  # Hide the main window
    while True:
        current_card = scan_rfid_card()
        if current_card and current_card != "BACK":
            break
    logging.info(f"RFID card scanned: {current_card}")
    print(f"RFID card scanned: {current_card}")
    temp_root.destroy()
    
    # Load or create the ODS file and retrieve existing points for this card
    doc, sheet = load_ods(ODS_FILE)
    existing_points, _ = get_points_for_card(sheet, current_card)
    if existing_points is not None:
        count = existing_points
        logging.info(f"Loaded existing points for card {current_card}: {count}")
    else:
        count = 0
        logging.info(f"No record found for card {current_card}; starting count at 0.")
    
    # Create the main GUI window
    root = tk.Tk()
    app = PedalCounterApp(root)
    
    logging.info("Pedal Counter GUI Application started.")
    print("Pedal Counter System running (Green LED is ON).")
    print(" - Press the pedal (GPIO6) to increment the count (Yellow LED flashes).")
    print(" - Press the push button (GPIO12) to generate and display a QR code (Red LED flashes).")
    try:
        root.mainloop()
    except KeyboardInterrupt:
        print("\nExiting application.")
    finally:
        green_led.off()
        yellow_led.off()
        red_led.off()
        GPIO.cleanup()
